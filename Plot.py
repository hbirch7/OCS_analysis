###########################################
# LZ OD-OCS testing: Plot script for NIM paper.
# Harvey Birch 
# hbirch@hep.ph.liv.ac.uk
###########################################
#import ROOT as R
from ROOT import *
import math
import sys 

filename = sys.argv[1]
print("Processing file: " + filename)
f = TFile(filename,"read")

H_fpgaNum = f.Get("fpgaNum")
fpgaNumI = int(H_fpgaNum.GetMean())
fpgaNum = str(fpgaNumI)

H_PBNum = f.Get("PBNum")
PBNumI = int(H_PBNum.GetMean())
PBNum = str(PBNumI)

c1 = TCanvas('c1','TrigWvslnNph',1920,1080)
H_TrigW = f.Get("lnnph mean vs TriggerWidth mean")  
H_TrigW.Draw()
gStyle.SetOptStat(0)
gStyle.SetOptFit(0111)
H_TrigW.SetMarkerStyle(20)
Title = "Trigger width versus ln(Number of photons per pulse) for FPGA{}CH{}".format(fpgaNum,PBNum)
H_TrigW.SetTitle(Title)
H_TrigW.SetXTitle('ln(Number of photons per pulse)')
H_TrigW.SetYTitle('Trigger width (ns)')
c1.SetGridy()
c1.Update()
c1fname = "FPGA{}_CH{}_lnNPHvsTrigW.png".format(fpgaNum,PBNum)
c1rname = "FPGA{}_CH{}_lnNPHvsTrigW.root".format(fpgaNum,PBNum)
c1ename = "FPGA{}_CH{}_lnNPHvsTrigW.eps".format(fpgaNum,PBNum)
c1.Print(c1fname)
c1.Print(c1rname)
c1.Print(c1ename)

#c2 = TCanvas('c2','NphvsPulseW',1920,1080)
c2 = TCanvas('c2','NphvsPulseW',10,65,700,500)
H_PulseW = f.Get("PMTPulseWidth mean vs lnNph mean")  
H_PulseW.Draw()
H_PulseW.SetMarkerStyle(20)
#Title = "PMT pulse width versus number of photons per pulse for FPGA{}CH{}".format(fpgaNum,PBNum)
#H_PulseW.SetTitle(Title)
H_PulseW.SetTitle('PB10')
H_PulseW.SetYTitle('Pulse width (ns)')
H_PulseW.SetXTitle('Number of photons per pulse')
c2.SetLogx()
c2.SetGridy()
c2.Update()
c2fname = "FPGA{}_CH{}_NPHvsPulseW.png".format(fpgaNum,PBNum)
c2ename = "FPGA{}_CH{}_NPHvsPulseW.eps".format(fpgaNum,PBNum)
c2.Print(c2fname)
c2.Print(c2ename)

c3 = TCanvas('c3','PD_Value',1920,1080)
H_PD_Value = f.Get("pdValue vs nph")  
H_PD_Value.Draw()
H_PD_Value.SetMarkerStyle(20)
Title = "Number of photons per pulse versus photodiode output for FPGA{}CH{}".format(fpgaNum,PBNum)
H_PD_Value.SetTitle(Title)
H_PD_Value.SetYTitle('Number of photons per pulse')
H_PD_Value.SetXTitle('Photodiode output')
c3.SetGrid()
c3.Update()
c3fname = "FPGA{}_CH{}_PD_ValuevsNPH.png".format(fpgaNum,PBNum)
c3rname = "FPGA{}_CH{}_PD_ValuevsNPH.root".format(fpgaNum,PBNum)
c3ename = "FPGA{}_CH{}_PD_ValuevsNPH.eps".format(fpgaNum,PBNum)
c3.Print(c3fname)
c3.Print(c3rname)
c3.Print(c3ename)


c4 = TCanvas('c4','PD_ValuevsPMTPW',1920,1080)
H_PD_ValuevsPMTPW = f.Get("PMTPulseWidth mean vs pdValue")  
H_PD_ValuevsPMTPW.Draw()
H_PD_ValuevsPMTPW.SetMarkerStyle(20)
Title = "Photodiode output versus PMT pulse width for FPGA{}CH{}".format(fpgaNum,PBNum)
H_PD_ValuevsPMTPW.SetTitle(Title)
H_PD_ValuevsPMTPW.SetXTitle('PMT Pulse width (ns)')
H_PD_ValuevsPMTPW.SetYTitle('Photodiode output')
c4.SetGrid()
c4.Update()
c4fname = "FPGA{}_CH{}_PMTPWvsPD_Value.png".format(fpgaNum,PBNum)
c4ename = "FPGA{}_CH{}_PMTPWvsPD_Value.eps".format(fpgaNum,PBNum)
c4.Print(c4fname)
c4.Print(c4ename)

c5 = TCanvas('c5','TWvsPMTPW',1920,1080)
H_TWvsPMTPW = f.Get("Trigger Width mean vs PMTPulseWidth mean")  
H_TWvsPMTPW.Draw()
gStyle.SetOptStat(0)
gStyle.SetOptFit(0111)
H_TWvsPMTPW.SetMarkerStyle(20)
Title = "PMT pulse width versus trigger width for FPGA{}CH{}".format(fpgaNum,PBNum)
H_TWvsPMTPW.SetTitle(Title)
H_TWvsPMTPW.SetXTitle('Trigger width (ns)')
H_TWvsPMTPW.SetYTitle('PMT Pulse width (ns)')
c5.SetGrid()
c5.Update()
c5fname = "FPGA{}_CH{}_TriggerWidthvsPMTPulseWidth.png".format(fpgaNum,PBNum)
c5ename = "FPGA{}_CH{}_TriggerWidthvsPMTPulseWidth.eps".format(fpgaNum,PBNum)
c5.Print(c5fname)
c5.Print(c5ename)

c6 = TCanvas('c6','WidthsetvsTrigW',1920,1080)
H_WidthsetvsTrigW = f.Get("H_WidthSet_vs_TrigWidth")  
H_WidthsetvsTrigW.Draw()
gStyle.SetOptStat(0)
gStyle.SetOptFit(0)
H_WidthsetvsTrigW.SetMarkerStyle(20)
Title = "Trigger width versus trigger width step for FPGA{}CH{}".format(fpgaNum,PBNum)
H_WidthsetvsTrigW.SetTitle(Title)
H_WidthsetvsTrigW.SetXTitle('Trigger width set')
H_WidthsetvsTrigW.SetYTitle('Trigger width (ns)')
H_WidthsetvsTrigW.SetAxisRange(4,14,"X")
c6.SetGrid()
c6.Update()
c6fname = "FPGA{}_CH{}_WidthsetvsTriggerWidth.png".format(fpgaNum,PBNum)
c6.Print(c6fname)
c6ename = "FPGA{}_CH{}_WidthsetvsTriggerWidth.eps".format(fpgaNum,PBNum)
c6.Print(c6ename)


c7 = TCanvas('c7','c7',1920,1080)
H_TrigWvsNph = f.Get("TriggerWidth mean vs nph mean")  
H_TrigWvsNph.Draw()
gStyle.SetOptStat(0)
gStyle.SetOptFit(0)
H_TrigWvsNph.SetMarkerStyle(20)
Title = "Number of photons per pulse versus trigger width for FPGA{}CH{}".format(fpgaNum,PBNum)
H_TrigWvsNph.SetTitle(Title)
H_TrigWvsNph.SetXTitle('Trigger width (ns)')
H_TrigWvsNph.SetYTitle('Number of photons per pulse')
H_TrigWvsNph.SetAxisRange(20,70,"X")
H_TrigWvsNph.SetAxisRange(0,1000e3,"Y")
c7.SetGrid()
c7.Update()
c7fname = "FPGA{}_CH{}_TriggerWidthvsNph.png".format(fpgaNum,PBNum)
c7ename = "FPGA{}_CH{}_TriggerWidthvsNph.eps".format(fpgaNum,PBNum)
c7.Print(c7fname)
c7.Print(c7ename)

c8 = TCanvas('c8','c8',1920,1080)
H_TrigWvsNphlow = f.Get("TriggerWidth mean vs nph mean")  
H_TrigWvsNphlow.Draw()
gStyle.SetOptStat(0)
gStyle.SetOptFit(0)
H_TrigWvsNphlow.SetMarkerStyle(20)
Title = "Number of photons per pulse versus trigger width for FPGA{}CH{}".format(fpgaNum,PBNum)
H_TrigWvsNphlow.SetTitle(Title)
H_TrigWvsNphlow.SetXTitle('Trigger width (ns)')
H_TrigWvsNphlow.SetYTitle('Number of photons per pulse')
H_TrigWvsNphlow.SetAxisRange(20,70,"X")
H_TrigWvsNphlow.SetAxisRange(0,10e3,"Y")
c8.SetGrid()
c8.Update()
c8fname = "FPGA{}_CH{}_TriggerWidthvsNphlow.png".format(fpgaNum,PBNum)
c8ename = "FPGA{}_CH{}_TriggerWidthvsNphlow.eps".format(fpgaNum,PBNum)
c8.Print(c8fname)
c8.Print(c8ename)

'''
c9 = TCanvas('c9','c9',1920,1080)
#
pad1 = TPad("pad1", "pad1", 0, 0.3, 1, 1.)
pad1.SetBottomMargin(0)  # joins upper and lower plot
pad1.Draw()
H_TrigWRes = f.Get("lnnph mean vs TriggerWidth mean")  
H_TrigWRes.Draw()
gStyle.SetOptStat(0)
gStyle.SetOptFit(0111)
H_TrigWRes.SetMarkerStyle(20)
Title = "Trigger width versus ln(Number of photons per pulse) for FPGA{}CH{}".format(fpgaNum,PBNum)
H_TrigWRes.SetTitle(Title)
H_TrigWRes.SetXTitle('ln(Number of photons per pulse)')
H_TrigWRes.SetYTitle('Trigger width (ns)')
c9.cd()
#
pad2 = TPad("pad2", "pad2", 0.02, 0, 1, 0.3)
pad2.SetTopMargin(0)  # joins upper and lower plot
pad2.SetBottomMargin(0.2)
pad2.Draw()
TWRes = TRatioPlot(H_TrigWRes)
TWRes.Draw()
c9.cd()
c9.Update()
c9fname = "FPGA{}_CH{}_lnNPHvsTrigW_Residual.png".format(fpgaNum,PBNum)
c9.Print(c9fname)

'''

c10 = TCanvas('c10','c10',1920,1080)
H_tsecvsNphLow = f.Get("tsec vs nph mean")  
H_tsecvsNphLow.Draw()
gStyle.SetOptStat(0)
gStyle.SetOptFit(0)
H_tsecvsNphLow.SetMarkerStyle(20)
c10.SetLogy()
Title = "log(Number of photons per pulse) versus test run time for FPGA{}CH{}".format(fpgaNum,PBNum)
H_tsecvsNphLow.SetTitle(Title)
H_tsecvsNphLow.SetXTitle('Test run time (s)')
H_tsecvsNphLow.SetYTitle('log(Number of photons per pulse)')
H_tsecvsNphLow.SetAxisRange(0,4000,"X")
H_tsecvsNphLow.SetAxisRange(0,65e3,"Y")
c10.SetGrid()
c10.Update()
c10fname = "FPGA{}_CH{}_tsecvsNph50k.png".format(fpgaNum,PBNum)
c10ename = "FPGA{}_CH{}_tsecvsNph50k.eps".format(fpgaNum,PBNum)
c10.Print(c10fname)
c10.Print(c10ename)

c11 = TCanvas('c11','c11',1920,1080)
H_tsecvsNph = f.Get("tsec vs nph mean")  
H_tsecvsNph.Draw()
gStyle.SetOptStat(0)
gStyle.SetOptFit(0)
H_tsecvsNph.SetMarkerStyle(20)
c11.SetLogy()
Title = "log(Number of photons per pulse) versus test run time for FPGA{}CH{}".format(fpgaNum,PBNum)
H_tsecvsNph.SetTitle(Title)
H_tsecvsNph.SetXTitle('Test run time (s)')
H_tsecvsNph.SetYTitle('log(Number of photons per pulse)')
H_tsecvsNph.SetAxisRange(0,7000,"X")
H_tsecvsNph.SetAxisRange(0,1e6,"Y")
c11.SetGrid()
c11.Update()
c11fname = "FPGA{}_CH{}_tsecvsNph.png".format(fpgaNum,PBNum)
c11ename = "FPGA{}_CH{}_tsecvsNph.eps".format(fpgaNum,PBNum)
c11.Print(c11fname)
c11.Print(c11ename)

c12 = TCanvas('c12','c12',1920,1080)
H_TrigWvsNphMicro = f.Get("TriggerWidth mean vs nph mean")  
H_TrigWvsNphMicro.Draw()
gStyle.SetOptStat(0)
gStyle.SetOptFit(0)
H_TrigWvsNphMicro.SetMarkerStyle(20)
Title = "Number of photons per pulse versus trigger width for FPGA{}CH{}".format(fpgaNum,PBNum)
H_TrigWvsNphMicro.SetTitle(Title)
H_TrigWvsNphMicro.SetXTitle('Trigger width (ns)')
H_TrigWvsNphMicro.SetYTitle('Number of photons per pulse')
H_TrigWvsNphMicro.SetAxisRange(21,25,"X")
H_TrigWvsNphMicro.SetAxisRange(400,2000,"Y")
c12.SetGrid()
c12.Update()
c12fname = "FPGA{}_CH{}_TriggerWidthvsNphMicro.png".format(fpgaNum,PBNum)
c12ename = "FPGA{}_CH{}_TriggerWidthvsNphMicro.eps".format(fpgaNum,PBNum)
c12.Print(c12fname)
c12.Print(c12ename)



c13 = TCanvas('c13','c13',1920,1080)
H_NphvsWidthSet = f.Get("Widthset vs nph")  
H_NphvsWidthSet.Draw()
gStyle.SetOptStat(0)
gStyle.SetOptFit(0)
H_NphvsWidthSet.SetMarkerStyle(20)
Title = "Number of photons per pulse versus width set for FPGA{}CH{}".format(fpgaNum,PBNum)
H_NphvsWidthSet.SetTitle(Title)
H_NphvsWidthSet.SetXTitle('Width set')
H_NphvsWidthSet.SetYTitle('Number of photons per pulse')
c13.SetGridy()
c13.Update()
c13fname = "FPGA{}_CH{}_NphvsWidthSet.png".format(fpgaNum,PBNum)
c13ename = "FPGA{}_CH{}_NphvsWidthSet.eps".format(fpgaNum,PBNum)
c13.Print(c13fname)
c13.Print(c13ename)
